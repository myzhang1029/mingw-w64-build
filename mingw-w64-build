#!/bin/bash
#
# Copyright (C) 2020 Kyle Schwarz
# Copyright (C) 2021 Zhang Maiyun
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

v_script="5git"
# This 'v' is required
v_mingww64="v9.0.0"
v_binutils="2.36.1"
v_gcc="11.1.0"
v_gmp="6.2.1"
v_mpfr="4.1.0"
v_mpc="1.2.1"
v_isl="0.24"

cpus="$(nproc)"
build="$(curl -s "http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess;hb=HEAD" | sh)"
wd="$PWD"
src="${src:-$wd/src}"
bld="${bld:-$wd/bld}"
log="${log:-$bld/build.log}"
prefix="${prefix:-$wd/install}"
rm -fr "$log" "$src" "$bld"
mkdir "$bld" "$src"
exec 3>&1 1>>"$log" 2>&1

show_help()
{
  cat <<HELP
usage: mingw-w64-build [OPTION]... ARCH...
Build the MinGW-w64 toolchain for ARCH(s) (i686 or x86_64).

  -h, --help         display this help and exit
  --version          output version information and exit
  --enable-pthreads  enable pthreads via winpthreads

Creates directories 'src' and 'bld' in the current directory and
  removes them when complete.

examples:
  mingw-w64-build i686
  mingw-w64-build x86_64
  mingw-w64-build i686 x86_64
HELP
}

show_version()
{
  cat <<VERSION
mingw-w64-build $v_script
Copyright (C) 2020 Kyle Schwarz
Copyright (C) 2021 Zhang Maiyun
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
VERSION
}

error_exit()
{
  local error_text
  if [ 0 = "$#" ]; then
    error_text="See 'build.log' for further details."
  else
    error_text="$1"
  fi

  echo "mingw-w64-build: error: $error_text" >&3

  exit 1
}

clean_build()
{
  rm -fr "$1"
  mkdir -p "$1"
  cd "$1" || error_exit
}

download_sources()
{
  cd "$src" || error_exit

  local urls=(
    "https://sourceforge.net/projects/mingw-w64/files/mingw-w64/mingw-w64-release/mingw-w64-$v_mingww64.tar.bz2"
    "https://ftp.gnu.org/gnu/binutils/binutils-$v_binutils.tar.xz"
    "https://ftp.gnu.org/gnu/gcc/gcc-$v_gcc/gcc-$v_gcc.tar.xz"
    "https://ftp.gnu.org/gnu/gmp/gmp-$v_gmp.tar.xz"
    "https://ftp.gnu.org/gnu/mpfr/mpfr-$v_mpfr.tar.xz"
    "https://ftp.gnu.org/gnu/mpc/mpc-$v_mpc.tar.gz"
    "http://isl.gforge.inria.fr/isl-$v_isl.tar.xz"
  )

  for url in "${urls[@]}"; do
    local archive="${url##*/}"
    echo "downloading $archive" >&3
    curl -C- -Lo "$archive" "$url" || error_exit
    echo "extracting $archive" >&3
    tar -xf "$archive" || error_exit
  done
}

build_toolchain()
{
  local host="$1-w64-mingw32"
  export PATH="$prefix/bin:$PATH"
  export LD_LIBRARY_PATH="$prefix/lib"

  if [ "$pthreads" = "true" ]; then
    enable_threads="--enable-threads=posix"
  fi

  clean_build "$bld/gmp"
  echo "configuring host gmp" >&3
  "../../src/gmp-$v_gmp/configure" --prefix="$prefix" || error_exit
  echo "building host gmp" >&3
  make "-j$cpus" || error_exit
  echo "installing host gmp" >&3
  make install || error_exit
  make distclean

  clean_build "$bld/mpfr"
  echo "configuring host mpfr" >&3
  "../../src/mpfr-$v_mpfr/configure" --prefix="$prefix" \
    --with-gmp="$prefix" || error_exit
  echo "building host mpfr" >&3
  make "-j$cpus" || error_exit
  echo "installing host mpfr" >&3
  make install || error_exit
  make distclean

  clean_build "$bld/mpc"
  echo "configuring host mpc" >&3
  "../../src/mpc-$v_mpc/configure" --prefix="$prefix" \
    --with-gmp="$prefix" --with-mpfr="$prefix" || error_exit
  echo "building host mpc" >&3
  make "-j$cpus" || error_exit
  echo "installing host mpc" >&3
  make install || error_exit
  make distclean

  clean_build "$bld/binutils"
  echo "configuring binutils" >&3
  "../../src/binutils-$br_binutils/configure" --prefix="$prefix" --disable-shared \
    --enable-static --with-sysroot="$prefix" --with-gmp="$prefix" --with-mpc="$prefix" \
    --with-mpfr="$prefix" --target="$host" --disable-multilib --disable-nls \
    --enable-lto --disable-werror || error_exit
  echo "building binutils" >&3
  make "-j$cpus" || error_exit
  echo "installing binutils" >&3
  make install || error_exit

  clean_build "$bld/mingw-w64"
  echo "configuring mingw-w64-headers" >&3
  "../../src/mingw-w64-$br_mingww64/mingw-w64-headers/configure" --build="$build" \
    --host="$host" --prefix="$prefix/$host" || error_exit
  echo "installing mingw-w64-headers" >&3
  make install || error_exit
  cd "$prefix" || error_exit
  ln -s "./$host" "./mingw" || error_exit

  clean_build "$bld/gcc"
  echo "configuring gcc" >&3
  "../../src/gcc-$br_gcc/configure" --target="$host" --disable-shared \
    --enable-static --disable-multilib --prefix="$prefix" \
    --with-gmp="$prefix" --with-mpc="$prefix" --with-mpfr="$prefix" \
    --enable-languages=c,c++ --disable-nls $enable_threads || error_exit
  echo "running 'make-gcc' for gcc" >&3
  make "-j$cpus" all-gcc || error_exit
  echo "running 'install-gcc' for gcc" >&3
  make install-gcc || error_exit

  clean_build "$bld/mingw-w64"
  echo "configuring mingw-w64-crt" >&3
  "../../src/mingw-w64-$br_mingww64/mingw-w64-crt/configure" --build="$build" --host="$host" \
    --prefix="$prefix/$host" --with-sysroot="$prefix/$host" || error_exit
  echo "building mingw-w64-crt" >&3
  make "-j$cpus" || error_exit
  echo "installing mingw-w64-crt" >&3
  make install || error_exit

  if [ "$pthreads" = "true" ]; then
    clean_build "$bld/winpthreads"
    echo "configuring winpthreads" >&3
    "../../src/mingw-w64-$br_mingww64/mingw-w64-libraries/winpthreads/configure" --build="$build" \
      --host="$host" --disable-shared --enable-static --prefix="$prefix/$host" || error_exit
    echo "building winpthreads" >&3
    make "-j$cpus" || error_exit
    echo "installing winpthreads" >&3
    make install || error_exit
  fi

  cd "$bld/gcc" || error_exit
  echo "building gcc" >&3
  make "-j$cpus" || error_exit
  echo "installing gcc" >&3
  make install || error_exit

  return 0
}

while :; do
  case $1 in
    -h|--help)
      show_help
      exit
      ;;
    --version)
      show_version
      exit
      ;;
    --enable-pthreads)
      pthreads=true
      ;;
    -?*)
      error_exit "unknown option: '$1'"
      ;;
    *)
      break
  esac

  shift
done

if [ 0 = "$#" ]; then
  error_exit "missing ARCH option
See 'mingw-w64-build --help' for build options." >&2
fi

for arch in "$@"; do
  if [ "$arch" != "i686" ] && [ "$arch" != "x86_64" ]; then
    error_exit "invalid ARCH: '$arch'"
  fi
done

progs=(
  "curl"
  "gzip"
  "bzip2"
  "git"
  "make"
  "g++"
  "tr"
  "tar"
  "flex"
  "bison"
  "makeinfo"
)
missing_progs=""
for prog in "${progs[@]}"; do
  if ! command -v "$prog" >/dev/null; then
    missing_progs="$prog $missing_progs"
  fi
done
if [ -n "$missing_progs" ]; then
  error_exit "missing required program(s): $missing_progs"
fi

download_sources

for arch in "$@"; do
  build_toolchain "$arch"
done
rm -fr "$bld" "$src"

exit 0
